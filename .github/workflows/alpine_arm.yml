name: Alpine on ARM

on: push

jobs:
  alpine:
    runs-on: ubuntu-24.04-arm
    container:
      image: 'alpine:3.22'
      # Volume needed for monkey-patch step.
      volumes:
        - /:/host

    steps:
      # Git is required so that actions/checkout does a proper Git checkout.
      - name: Install Git in container
        run: |
          apk update
          apk add git
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Monkey-patch Alpine Node.js into runner
        # This step is required because the actions refuse to run on ARM 64
        # while in a container. So the OS ID is changed and the host's Node.js
        # binary is replaced with the one from the container.
        # Works for now, but may fail when Node or other stuff gets updated on
        # the runner's side.
        run: |
          apk add nodejs
          sed -i 's~ID=alpine~ID=nopine~g' /etc/os-release
          cd /host/home/runner/actions-runner/*/externals/
          rm -rf node20/*
          mkdir node20/bin
          ln -s /usr/bin/node node20/bin/node
          # Fake Node.js 24 for actions/checkout@v5.
          # Currently, Alpine 3.22 has Node.js 22.16.0, but that seems to work,
          # too, because it looks like checkout is not using any stuff specific
          # to Node.js 24.
          rm -rf node24/*
          mkdir node24/bin
          ln -s /usr/bin/node node24/bin/node
      # Checks-out the repository under $GITHUB_WORKSPACE.
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Install packages
        run: |
          apk update
          apk add catch2 cmake g++ make pkgconf
      - name: Build statically linked binaries
        run: |
          cd "$GITHUB_WORKSPACE"
          mkdir build-static
          cd build-static
          cmake ../ -DENABLE_LTO=ON -DENABLE_STATIC_LINKING=ON -DNO_METEOR_CHESS=ON
          cmake --build . -j4
      - name: Run tests
        run: |
          cd "$GITHUB_WORKSPACE"/build-static
          ctest -V
      - name: Collect build artifacts
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/artifacts
          cd "$GITHUB_WORKSPACE"
          # engine
          mkdir -p "$GITHUB_WORKSPACE"/artifacts/simple-chess-engine
          cp build-static/apps/engine/simple-chess-engine artifacts/simple-chess-engine/
          cp apps/engine/*.md artifacts/simple-chess-engine/
          # pgn-reader
          mkdir -p "$GITHUB_WORKSPACE"/artifacts/pgn-reader
          cp build-static/apps/pgn-reader/pgn-reader artifacts/pgn-reader/
          cp apps/pgn-reader/*.md artifacts/pgn-reader/
          cp -R apps/pgn-reader/examples artifacts/pgn-reader/examples
          # simple-chess-cli
          mkdir -p "$GITHUB_WORKSPACE"/artifacts/simple-chess-cli
          cp build-static/apps/simple-chess-cli/simple-chess-cli artifacts/simple-chess-cli/
          cp apps/simple-chess-cli/*.md artifacts/simple-chess-cli/
          # license + readme + changelog + third-party notices
          cp LICENSE artifacts/
          cp apps/readme_package.md artifacts/readme.md
          cp changelog.md artifacts/
          cp apps/third-party.md artifacts/
          # determine version
          VERSION=$(git describe --always)
          echo Version is $VERSION.
          mv artifacts simple-chess-$VERSION
          tar czf simple-chess_${VERSION}_linux-arm64-generic.tar.gz simple-chess-$VERSION
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: simple-chess_linux-arm64-generic
          path: simple-chess_*_linux-arm64-generic.tar.gz
          if-no-files-found: error
